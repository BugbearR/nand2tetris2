// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Not(in=zx, out=nzx);
    And16(a=x,
        b[0]=nzx,
        b[1]=nzx,
        b[2]=nzx,
        b[3]=nzx,
        b[4]=nzx,
        b[5]=nzx,
        b[6]=nzx,
        b[7]=nzx,
        b[8]=nzx,
        b[9]=nzx,
        b[10]=nzx,
        b[11]=nzx,
        b[12]=nzx,
        b[13]=nzx,
        b[14]=nzx,
        b[15]=nzx,
        out=xb1);
    Not16(in=xb1, out=nxb1);
    Mux16(a=xb1, b=nxb1, sel=nx, out=xb2);

    Not(in=zy, out=nzy);
    And16(a=y,
        b[0]=nzy,
        b[1]=nzy,
        b[2]=nzy,
        b[3]=nzy,
        b[4]=nzy,
        b[5]=nzy,
        b[6]=nzy,
        b[7]=nzy,
        b[8]=nzy,
        b[9]=nzy,
        b[10]=nzy,
        b[11]=nzy,
        b[12]=nzy,
        b[13]=nzy,
        b[14]=nzy,
        b[15]=nzy,
        out=yb1);
    Not16(in=yb1, out=nyb1);
    Mux16(a=yb1, b=nyb1, sel=ny, out=yb2);

    And16(a=xb2, b=yb2, out=andxy);
    Add16(a=xb2, b=yb2, out=sumxy);

    Mux16(a=andxy, b=sumxy, sel=f, out=ob);

    Not16(in=ob, out=nob);
    Mux16(a=ob, b=nob, sel=no, out=out, out[0..7]=olow, out[8..15]=ohigh, out[15]=ng);

    Or8Way(in=olow, out=olnz);
    Or8Way(in=ohigh, out=ohnz);
    Or(a=olnz, b=ohnz, out=onz);
    Not(in=onz, out=zr);
}
